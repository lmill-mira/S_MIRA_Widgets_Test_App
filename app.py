from cytomine import CytomineJob
from time import sleep
import os
import sys
import shutil
from cytomine.models import JobData, ImageInstance, Annotation
import numpy as np
import pandas as pd
import cv2
from skimage import data
import json
from PIL import Image
import logging


def create_widget_number(title, value, unit, description):
    """
    Create an entry for a number widget.
    Args:
        title: Title of the widget.
        value: Widget numeric value.
        unit: Unit (e.g. µm, mm, cm, m)
        description: Description text for the widget.

    Returns:
        Dictionary
    """
    widget_dict = dict()
    widget_dict['title'] = title
    widget_dict['type'] = 'Number'
    widget_dict['value'] = value
    widget_dict['unit'] = unit
    widget_dict['description'] = description
    return widget_dict


def create_widget_histogram(title, data_source_file, data_column_name, unit, description):
    """
    Create an entry for a histogram widget.
    Args:
        title: Title of the widget.
        data_source_file: Filename of the data source (e.g. *.csv or *.xlsx).
        data_column_name: Defines the column name, where to grab the data from.
        unit: Unit (e.g. µm, mm, cm, m).
        description: Description text for the widget.

    Returns:
        Dictionary
    """
    widget_dict = dict()
    widget_dict['title'] = title
    widget_dict['type'] = 'Histogram'

    # nested dict for data source
    data_dict = dict()
    data_dict['source'] = data_source_file
    data_dict['column'] = data_column_name

    # add data
    widget_dict['data'] = data_dict
    widget_dict['unit'] = unit
    widget_dict['description'] = description
    return widget_dict


def create_widgets_description(job_id, widgets_list):
    widgets = dict()
    widgets['run id'] = job_id
    widgets['widgets'] = widgets_list
    return widgets


def upload_job_data_file(job, job_filename, comment, filepath):
    # save a file generated by this run into a "job data" that will be available in the UI.
    job_data = JobData(job.id, comment, job_filename).save()
    job_data.upload(filepath)


def create_fake_data(image_name):
    n_rows = int(np.random.uniform(1000, 8000))
    um_per_px = 0.6614

    # create a column with image name
    image_name_list = [image_name]
    column_name = np.array(image_name_list * n_rows).reshape(n_rows, 1)

    # create a column with fake fiber ids
    column_fiber_ids = np.arange(1, n_rows+1, dtype=int).reshape(n_rows, 1)

    # create a column with fake area sizes in px
    mu, sigma = 6228, 5000
    column_areas_px = np.abs(np.random.normal(mu, sigma, size=(n_rows, 1)))
    column_areas_um = np.abs(np.random.normal(mu, sigma, size=(n_rows, 1))) * um_per_px**2

    # create a column with fake diameter sizes in px
    mu, sigma = 47, 20
    column_diameters_px = np.abs(np.random.normal(mu, sigma, size=(n_rows, 1)))
    column_diameters_um = np.abs(np.random.normal(mu, sigma, size=(n_rows, 1))) * um_per_px

    # concatenate all columns
    data = np.concatenate((column_fiber_ids, column_areas_px, column_areas_um, column_diameters_px, column_diameters_um), axis=1)

    # create a pandas DataFrame
    df = pd.DataFrame(data=data, columns=['Fiber ID', 'Area [px]', 'Area [µm²]', 'Fiber Diameter [px]', 'Fiber Diameter [µm]'])
    df.insert(loc=0, column='Image name', value=column_name)

    return df


def main(argv):
    with CytomineJob.from_cli(argv) as cytj:
        # retrieve parameters
        cytomine_job = cytj.job
        job_id = cytomine_job.id
        parameters = cytj.parameters
        image_id = parameters.param_image_id
        annotation_id = parameters.param_annotation_id

        # get image name
        image_instance = ImageInstance().fetch(image_id)
        image_name = image_instance.instanceFilename

        # dummy progress bar test
        progress = 0
        n_steps = 10
        progress_delta = 100 / n_steps
        for i in range(10):
            # ATTENTION: progress must be an integer
            cytomine_job.update(progress=int(progress), statusComment="Analyzing image {}...".format(image_instance.instanceFilename))
            logging.debug("Image id: %d width: %d height: %d resolution: %f magnification: %d filename: %s", image_id,
                          image_instance.width, image_instance.height, image_instance.resolution, image_instance.magnification, image_instance.filename)

            # sleep for one second
            sleep(1)
            logging.info("Finished processing image %s", image_instance.instanceFilename)
            progress += progress_delta

        # update to 100%
        cytomine_job.update(progress=int(progress), statusComment="Analyzing image {}...".format(image_instance.instanceFilename))

        # create fake data
        df = create_fake_data(image_name)

        # create a temp working directory to store file-type app data (i.e. text-files)
        working_path = os.path.join("tmp", str(cytomine_job.id))
        if not os.path.exists(working_path):
            os.makedirs(working_path)

        # create the output csv file, save it to the temp folder and upload the file as JobData
        csv_file_name = 'example_csv_output.csv'
        csv_save_path = os.path.join(working_path, csv_file_name)
        df.to_csv(csv_save_path, index=False, encoding='utf-16')
        upload_job_data_file(job=cytomine_job, job_filename=csv_file_name, comment='Algorithm-generated csv file output.', filepath=csv_save_path)

        # create the output excel file, save it to the temp folder and upload the file as JobData
        excel_file_name = 'example_excel_output.xlsx'
        excel_save_path = os.path.join(working_path, excel_file_name)
        df.to_excel(excel_save_path, index=False)
        upload_job_data_file(job=cytomine_job, job_filename=excel_file_name, comment='Algorithm-generated excel file.', filepath=excel_save_path)

        # create the widgets description file
        mean_diameter = df['Fiber Diameter [µm]'].mean()
        number_widget_1 = create_widget_number(title='Mean fiber diameter', value=mean_diameter, unit='µm', description='The mean fiber diameter based on the minimal feret.')

        n_fibers = len(df)
        number_widget_2 = create_widget_number(title='Number of Fibers', value=n_fibers, unit='', description='The total number of segmented / detected fibers.')

        mean_area = df['Area [µm²]'].mean()
        number_widget_3 = create_widget_number(title='Mean fiber area', value=mean_area, unit='µm²', description='The mean fiber diameter.')

        histogram_widget = create_widget_histogram(title='Fiber diameter distribution', data_source_file=csv_file_name, data_column_name='Fiber Diameter [µm]', unit='µm',
                                                   description='Histogram of the fiber diameter distribution.')

        # combine and save as widgets.json and upload
        widgets_file_name = 'widgets.json'
        widgets_description_save_path = os.path.join(working_path, widgets_file_name)
        widgets_dict = create_widgets_description(job_id, [number_widget_1, number_widget_2, number_widget_3, histogram_widget])
        with open(widgets_description_save_path, 'w', encoding='utf-16') as fp:         # use uft-16 encoding for special characters like 'µ' or '²'
            json.dump(widgets_dict, fp, sort_keys=True, indent=4, ensure_ascii=False)
        upload_job_data_file(job=cytomine_job, job_filename=widgets_file_name, comment='Algorithm-generated widgets description file.', filepath=widgets_description_save_path)

        # create dummy images
        dummy_image = data.skin()
        jpg_save_path = os.path.join(working_path, 'jpg_dummy.jpg')
        png_save_path = os.path.join(working_path, 'png_dummy.png')
        cv2.imwrite(jpg_save_path, cv2.cvtColor(dummy_image, cv2.COLOR_RGB2BGR))
        cv2.imwrite(png_save_path, cv2.cvtColor(dummy_image, cv2.COLOR_RGB2BGR))
        upload_job_data_file(job=cytomine_job, job_filename='Dummy jpg file.jpg', comment='Algorithm-generated jpg image.', filepath=jpg_save_path)
        upload_job_data_file(job=cytomine_job, job_filename='Dummy png file.png', comment='Algorithm-generated png image.', filepath=png_save_path)

        # get the original image data and save it as a non-pyramidal image
        image_save_path = os.path.join(working_path, 'image.jpg')
        image_instance.download(image_save_path)        # stores the image as a pyramidal file, need to open it and upload the raw data
        img_data = np.asarray(Image.open(image_save_path))
        cv2.imwrite(image_save_path, cv2.cvtColor(img_data, cv2.COLOR_RGB2BGR))
        upload_job_data_file(job=cytomine_job, job_filename='Original image.jpg', comment='Original image data.', filepath=image_save_path)

        # if a correct annotation ID was defined (optional parameter), upload the image data of the annotation as additional job data
        if annotation_id is not None:
            annotation_file_name = 'annotation_' + str(annotation_id) + '.jpg'
            annotation_save_path = os.path.join(working_path, annotation_file_name)
            annotation = Annotation().fetch(annotation_id)
            if isinstance(annotation, bool):
                print('Annotation id invalid!')
            else:
                annotation.dump(annotation_save_path)
                upload_job_data_file(job=cytomine_job, job_filename=annotation_file_name, comment='Annotation / ROI image data.', filepath=annotation_save_path)

        # delete working directory
        shutil.rmtree(working_path, ignore_errors=True)


if __name__ == "__main__":
    main(sys.argv[1:])
